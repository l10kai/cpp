/*
.______   ____    ____
|   _  \  \   \  /   /
|  |_)  |  \   \/   /
|   _  <    \_    _/
|  |_)  |     |  |
|______/      |__|
 __       __  .__   __.  __  ___
|  |     |  | |  \ |  | |  |/  /
|  |     |  | |   \|  | |  '  /
|  |     |  | |  . `  | |    <
|  `----.|  | |  |\   | |  .  \
|_______||__| |__| \__| |__|\__\
*/
#include <bits/stdc++.h>
#define mem(x, y) memset(x, y, sizeof(x))
#define all(x)    x.begin(), x.end()
#define rall(v)   v.rbegin(), v.rend()
#define sqa(x)    ((x) * (x))
#define as        static_cast
#define fi        first
#define se        second
#define pb        push_back
#define ppb       pop_back
#define pii       pair<int, int>
#define pll       pair<i64, i64>

namespace MATH {
    template <typename T> T gcd(T a, T b) {
        return b == 0 ? a : gcd(b, a % b);
    }
    template <typename T> T lcm(T a, T b) {
        return a / gcd(a, b) * b;
    }
    template <typename T> bool isprime(T n) {
        if (n <= 1)
            return false;
        for (T i = 2; i <= std::sqrt(n); i++)
            if (n % i == 0)
                return false;
        return true;
    }
}

using namespace MATH;
using namespace std;
using i64 = long long;

i64 a[] = {
    100010, 100001, 100000, 11111,  11110,  11101,  11100,  11011,  11010,
    11001,  11000,  10111,  10110,  10101,  10100,  10011,  10010,  100010,
    10001,  100000, 10000,  12221,  11110,  1111,   12210,  11100,  1110,
    12111,  11010,  1101,   12100,  11000,  1100,   11121,  10110,  1011,
    11110,  10100,  1010,   11011,  10010,  1001,   100000, 11000,  10000,
    1000,   12210,  11211,  11100,  1221,   1110,   111,    11110,  11000,
    1210,   1100,   110,    10100,  1111,   1010,   101,    1100,   1000,
    100,    110,    11,     10,     1,      1,      100010, 100010, 100001,
    100001, 100000, 100000, 11111,  11111,  11110,  11110,  11101,  11101,
    11100,  11100,  11011,  11011,  11010,  11010,  11001,  11001,  11000,
    11000,  10111,  10111,  10110,  10110,  10101,  10101,  10100,  10100,
    10011,  10011,  10010,  10010,  10001,  100010, 100010, 10001,  10000,
    100000, 100000, 10000,  1111,   12221,  12221,  11110,  11110,  1111,
    1110,   12210,  12210,  11100,  11100,  1110,   1101,   12111,  12111,
    11010,  11010,  1101,   1100,   12100,  12100,  11000,  11000,  1100,
    1011,   11121,  11121,  10110,  10110,  1011,   1010,   11110,  11110,
    10100,  10100,  1010,   1001,   11011,  11011,  10010,  10010,  1001,
    1000,   100000, 100000, 11000,  11000,  10000,  10000,  1000,   111,
    12210,  12210,  11211,  11211,  11100,  11100,  1221,   12210,  12210,
    1221,   1110,   1110,   111,    110,    11110,  11110,  11000,  11000,
    1210,   12100,  12100,  1210,   1100,   1100,   110,    101,    10100,
    10100,  1111,   11110,  11110,  1111,   1010,   1010,   101,    100,
    1100,   11000,  11000,  1100,   1000,   1000,   100,    11,     110,
    110,    11,     10,     10,     1,      111111, 111110, 111101, 111100,
    111011, 111010, 111001, 111000, 110111, 110110, 110101, 110100, 110011,
    110010, 110001, 110000, 101111, 101110, 101101, 101100, 101011, 101010,
    101001, 101000, 100111, 100110, 100101, 100100, 100011, 100010, 100001,
    100000, 11111,  11110,  11101,  11100,  11011,  11010,  11001,  11000,
    10111,  10110,  10101,  10100,  10011,  10010,  10001,  10000,  1111,
    1110,   1101,   1100,   1011,   1010,   1001,   1000,   111,    110,
    101,    100,    11,     10,     1};

vector<bool>b(10001000,0);

void solve() {
    //mem(b, 0);
    int n;
    cin >> n;

    for (auto &&x : a) {
        b[x]=true;
    }
b[11] =true;
    b[1] = true;
    if (b[n])
        cout << "YES" << endl;
    else
        cout << "NO" << endl;
}

signed main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);

    int t;
    cin >> t;
    while (t--) {
        solve();
    }
    return 0;
}
